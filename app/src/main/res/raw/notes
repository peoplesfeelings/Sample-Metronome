to do
    test
        delete file name after samples activty shows it then try to select it
        select a file that doesn't load successfully by pfseq (mono)
    relay pfseq messages to app user
        if clip doesn't validate
    test what happens if file is deleted
        fix bug in which samples activity crashes if selected sample had been deleted
    bug:
        expected result: after selecting an audio file that works, it should start sounding again
        observed result: after selecting an audio file that works, it does not start sounding again until user navigates back to main activity
        steps to replicate:
            start metronome
            select an audio file that doesn't load successfully
            select a different audio file that does load successfully
    fix it so dial cant wind beyond the limits
    don't need to pass adapter activity because you can get it activity context from view instances
    redo error reporting from service so that it can be sent to either activity
    remove thing.wav and wood_beam.wav
    fix margins on about page
    if more than 1 tick per beat, sub-beats should be lower volume
    look into error reporting
        android playstore
        log file
        popup with email link
    new features
        settings page - dial sensitivity

store listing
    precision
    connect by usb. put in sample_metronome folder
    update accepted files

maybe do
    consolidate similar code across format decoders/parsers
    move fileNeedsToBeLoaded to Dry
    call at.release in onstop?
        would need to set fileNeedsToBeLoaded to true
    replace WaveInfo with subclass of MediaFormat
    remove fileBeingLoaded initialization in service onCreate

audiotrack
    https://android.googlesource.com/platform/frameworks/base/+/android-4.4_r1/media/java/android/media/AudioTrack.java



documentation (technical design to be replaced by pending new rebuild)
    had to go with AudioTrack class because MediaPlayer and SoundPool introduce latency to timing of individual ticks being played
        decoding the audio files in order to feed AudioTrack raw PCM data means using the MediaCodec API
            MediaCodec works best with the getInputBuffer/getOutputBuffer calls introduced in API 21
        because we're decoding audio files ourselves we have to be careful about validating the files
            so we need to be able to alert the user if a file is not usable for some reason
            because it's desirable to allow user to change audio file selection while metronome is playing, loadFile() can be initiated by user from main activity screen or sample screen
                rather than feeding potential error message to either activity, we just bring main activity to top of stack and show user error dialog there
                    main activity establishes connection to service in activity onstart using async serviceconnection callback so sometimes we have to stash the error message in the service for a moment then have main activity check if there is an error message stashed
    main activity
        versionSetUp
            called in onRequestPermissionsResult() and getPermissionForWrite()
                because it's where we write samples so we need write permission
            the requirements that led to this are:
                developer can include new samples in new app version
                when user's app is updated, only new samples are written (deleted samples won't be written again)
                samples we don't like anymore can be removed and they won't be written to new installers
                    but will remain for people who have them already
    decoder workflow diagram
        https://drive.google.com/file/d/15RkGM2yxLSBOSa7fqDMVjZ_NewCASOQn/view?usp=sharing
    the breaks
        first the user needs to grant write permission
        then the app needs to do version set up
        then the sequencer needs to be set up
        then the tracks need to be set up
        then the rate needs to be set












########################## misc notes #########################################

48,000 samples per second means 48 samples per millisecond




########################## snippets i may never need ##########################

        Log.d(Dry.TAG, "THREAD: " + android.os.Process.getThreadPriority(android.os.Process.myTid()));


        if (format.containsKey(MediaFormat.KEY_MAX_INPUT_SIZE)) {
            inputBuffer = ByteBuffer.allocate(format.getInteger(MediaFormat.KEY_MAX_INPUT_SIZE));
        } else {
            inputBuffer = ByteBuffer.allocate((int) new File(fileLocation).length());
        }
        while (extractor.readSampleData(inputBuffer, 0) >= 0) {
            extractor.advance();
        }

